name: Build, Push to ECR, Deploy

on:
  push:
    branches: [main]

jobs:
  build_and_push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

  deploy:
    name: Deploy to EC2
    runs-on: self-hosted  # Usa el runner en tu EC2
    needs: [build_and_push]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy application
        run: |
          # Autenticarse con ECR desde la instancia EC2
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
          
          # Copiar archivos y configurar
          mkdir -p ~/app/templates ~/app/nginx
          cp -r templates/* ~/app/templates/ || true
          cp -r nginx/* ~/app/nginx/ || true
          cp docker-compose.yml ~/app/ || true
          cp init-letsencrypt.sh ~/app/ || true
          chmod -R 755 ~/app/templates
          chmod 755 ~/app/init-letsencrypt.sh || true
          
          # Ir al directorio de la aplicación y desplegar
          cd ~/app
          
          # Detener contenedores antiguos
          docker-compose down --remove-orphans || true
          docker ps -a -q | xargs -r docker rm -f || true
          docker container prune -f || true
          
          # Descargar nuevas imágenes y levantar servicios
          export ECR_REPOSITORY_URI=${{ secrets.ECR_REPOSITORY_URI }}
          docker-compose pull
          docker-compose up -d
          
          # Configurar SSL con Cloudflare DNS
          echo "Preparando para SSL..."

          # Copiar script de SSL para Cloudflare
          cp cloudflare-ssl.sh ~/app/ || true
          chmod +x ~/app/cloudflare-ssl.sh || echo "Error en chmod"

          # Configurar credenciales de Cloudflare 
          cd ~/app
          export CLOUDFLARE_EMAIL="${{ secrets.CLOUDFLARE_EMAIL }}"
          export CLOUDFLARE_API_KEY="${{ secrets.CLOUDFLARE_API_KEY }}"

          # Ejecutar script
          ./cloudflare-ssl.sh || echo "Advertencia: Error al configurar SSL con Cloudflare"

          echo "Despliegue completado"

  test:
    name: Test deployment
    runs-on: self-hosted
    needs: [deploy]
    steps:
      - name: Run tests
        run: |
          cd ~/app
          docker exec web pytest test/cronjob/test_cronjob.py || echo "Tests ejecutados"
          
          echo "Esperando 10 segundos..."
          sleep 10
          
          echo "Invocando endpoint force-check..."
          ENDPOINT="http://localhost:8000/api/cronjob/force-check"
          response=$(curl -Ls -o /dev/null -w "%{http_code}" -X POST "$ENDPOINT")
          echo "Código de respuesta: $response"
          
          if [ "$response" -eq 200 ]; then
              echo "Success: Scheduler triggered to check for jobs."
          else
              echo "Error: HTTP status $response"
              echo "Continua de todos modos..."
          fi
          
          echo "Verificando que el worker RQ esté funcionando:"
          docker logs rq_worker --tail 20