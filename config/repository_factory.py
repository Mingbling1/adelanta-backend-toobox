import asyncio
import weakref
from contextlib import suppress
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, Session
from config.db_mysql import DatabaseSessionManager
from config.settings import settings
from repositories.datamart.TipoCambioRepository import TipoCambioRepository
from repositories.datamart.KPIAcumuladoRepository import KPIAcumuladoRepository
from repositories.datamart.KPIRepository import KPIRepository
from repositories.datamart.SaldosRepository import SaldosRepository
from repositories.datamart.NuevosClientesNuevosPagadoresRepository import (
    NuevosClientesNuevosPagadoresRepository,
)
from repositories.datamart.ActualizacionReportesRepository import (
    ActualizacionReportesRepository,
)
from repositories.datamart.CXCAcumuladoDIMRepository import CXCAcumuladoDIMRepository
from repositories.datamart.CXCPagosFactRepository import CXCPagosFactRepository
from repositories.datamart.CXCDevFactRepository import CXCDevFactRepository
from config.logger import logger


# üõ†Ô∏è Registry global para cleanup autom√°tico
_active_factories = weakref.WeakSet()


class RepositoryFactory:
    """
    Factory para crear repositories con sesiones aisladas
    Cada task de Celery obtiene sus propias instancias
    üöÄ MEJORADO: Configuraci√≥n espec√≠fica para evitar event loop warnings
    """

    def __init__(self):
        # Registrar para cleanup autom√°tico
        _active_factories.add(self)

        # üõ°Ô∏è CONFIGURACI√ìN OPTIMIZADA PARA CELERY + ASYNC
        # Par√°metros ajustados para evitar conexiones hu√©rfanas
        self.session_manager = DatabaseSessionManager(
            host=str(settings.DATABASE_MYSQL_URL),
            engine_kwargs={
                "echo": False,  # Sin logging detallado en tasks
                "future": True,
                "pool_size": 3,
                "max_overflow": 1,
                "pool_recycle": 15,
                "pool_reset_on_return": "commit",  # Reset estado al devolver conexi√≥n
                "connect_args": {
                    "connect_timeout": 8,  # REDUCIDO: Timeout m√°s agresivo
                    "charset": "utf8mb4",
                },
            },
        )
        self._session = None
        self._closed = False
        logger.info("üè≠ RepositoryFactory creado con configuraci√≥n Celery-optimizada")

    async def get_db_session(self):
        """
        Obtener sesi√≥n de base de datos reutilizable
        üõ°Ô∏è MEJORADO: Verificaci√≥n de estado y manejo de errores robusto
        """
        if self._closed:
            raise RuntimeError(
                "RepositoryFactory ya est√° cerrado - no se pueden crear m√°s sesiones"
            )

        if self._session is None:
            try:
                # Verificar que el session manager est√© disponible
                if self.session_manager._engine is None:
                    raise RuntimeError("DatabaseSessionManager no est√° inicializado")

                self._session = self.session_manager._sessionmaker()
                logger.debug("üìÅ Nueva sesi√≥n de BD creada exitosamente")

            except Exception as e:
                logger.error(f"‚ùå Error cr√≠tico creando sesi√≥n de BD: {e}")
                raise RuntimeError(f"No se pudo crear sesi√≥n de BD: {e}") from e

        return self._session

    async def create_tipo_cambio_repository(self) -> TipoCambioRepository:
        """Crear repository de TipoCambio"""
        db_session = await self.get_db_session()
        return TipoCambioRepository(db=db_session)

    async def create_kpi_acumulado_repository(self) -> KPIAcumuladoRepository:
        """Crear repository de KPI Acumulado"""
        db_session = await self.get_db_session()
        return KPIAcumuladoRepository(db=db_session)

    async def create_kpi_repository(self) -> KPIRepository:
        """Crear repository de KPI"""
        db_session = await self.get_db_session()
        return KPIRepository(db=db_session)

    async def create_saldos_repository(self) -> SaldosRepository:
        """Crear repository de Saldos"""
        db_session = await self.get_db_session()
        return SaldosRepository(db=db_session)

    async def create_nuevos_clientes_nuevos_pagadores_repository(
        self,
    ) -> NuevosClientesNuevosPagadoresRepository:
        """Crear repository de NuevosClientesNuevosPagadores"""
        db_session = await self.get_db_session()
        return NuevosClientesNuevosPagadoresRepository(db=db_session)

    async def create_actualizacion_reportes_repository(
        self,
    ) -> ActualizacionReportesRepository:
        """Crear repository de ActualizacionReportes"""
        db_session = await self.get_db_session()
        return ActualizacionReportesRepository(db=db_session)

    async def create_cxc_acumulado_dim_repository(self) -> CXCAcumuladoDIMRepository:
        """Crear repository de CXCAcumuladoDIM"""
        db_session = await self.get_db_session()
        return CXCAcumuladoDIMRepository(db=db_session)

    async def create_cxc_pagos_fact_repository(self) -> CXCPagosFactRepository:
        """Crear repository de CXCPagosFact"""
        db_session = await self.get_db_session()
        return CXCPagosFactRepository(db=db_session)

    async def create_cxc_dev_fact_repository(self) -> CXCDevFactRepository:
        """Crear repository de CXCDevFact"""
        db_session = await self.get_db_session()
        return CXCDevFactRepository(db=db_session)

    async def cleanup(self):
        """
        üõ°Ô∏è MEJORADO: Limpiar recursos del factory de forma ultra-segura
        Maneja espec√≠ficamente el caso de event loop cerrado en Celery
        """
        if self._closed:
            logger.debug("RepositoryFactory ya est√° cerrado, saltando cleanup")
            return  # Ya limpiado

        logger.info("üßπ Iniciando cleanup robusto de RepositoryFactory...")

        try:
            # 1. üîí Marcar como cerrado inmediatamente para evitar uso concurrente
            self._closed = True

            # 2. üóÇÔ∏è Cerrar sesi√≥n activa de forma segura
            if self._session is not None:
                try:
                    # Verificar si hay un event loop activo
                    try:
                        loop = asyncio.get_running_loop()
                        if loop.is_closed():
                            logger.warning(
                                "‚ö†Ô∏è Event loop cerrado, usando cleanup directo de sesi√≥n"
                            )
                            # Si el loop est√° cerrado, intentar cierre directo sin await
                            with suppress(Exception):
                                if (
                                    hasattr(self._session, "_connection")
                                    and self._session._connection
                                ):
                                    self._session._connection.close()
                        else:
                            # Event loop activo, cierre normal
                            await self._session.close()
                            logger.debug("‚úÖ Sesi√≥n de BD cerrada correctamente")
                    except RuntimeError as e:
                        if "no running event loop" in str(e).lower():
                            logger.debug(
                                "üîÑ No hay event loop activo, saltando cierre async de sesi√≥n"
                            )
                        else:
                            raise  # Re-lanzar si es otro tipo de RuntimeError

                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error cerrando sesi√≥n de BD: {e}")
                finally:
                    self._session = None

            # 3. üè≠ Cerrar session manager de forma segura
            if hasattr(self, "session_manager") and self.session_manager:
                try:
                    # Verificar si hay un event loop activo
                    try:
                        loop = asyncio.get_running_loop()
                        if loop.is_closed():
                            logger.warning(
                                "‚ö†Ô∏è Event loop cerrado, saltando cleanup de session manager"
                            )
                        else:
                            await self.session_manager.close()
                            logger.debug("‚úÖ Session manager cerrado correctamente")
                    except RuntimeError as e:
                        if "no running event loop" in str(e).lower():
                            logger.debug(
                                "üîÑ No hay event loop activo, saltando cierre async de session manager"
                            )
                        else:
                            raise  # Re-lanzar si es otro tipo de RuntimeError

                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error cerrando session manager: {e}")

        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico durante cleanup: {e}")
        finally:
            logger.info("‚úÖ RepositoryFactory cleanup completado")

    def __del__(self):
        """
        üõ°Ô∏è Destructor seguro: Previene warnings en garbage collection
        NO realiza operaciones async aqu√≠ para evitar problemas con event loop cerrado
        """
        if not self._closed and hasattr(self, "_session") and self._session is not None:
            logger.warning(
                "‚ö†Ô∏è RepositoryFactory no se cerr√≥ expl√≠citamente antes de destructor"
            )
            # Intentar cleanup s√≠ncrono b√°sico sin await
            with suppress(Exception):
                if hasattr(self._session, "_connection") and self._session._connection:
                    # Cierre directo de la conexi√≥n sin async
                    self._session._connection.close()
                self._session = None
            self._closed = True


def create_repository_factory() -> RepositoryFactory:
    """
    Crear una nueva instancia de RepositoryFactory para cada task
    Esto evita problemas de estado compartido en Celery
    """
    return RepositoryFactory()


# üõ†Ô∏è Registry global para cleanup autom√°tico (sync)
_active_sync_factories = weakref.WeakSet()


class RepositoryFactorySync:
    """
    Factory S√çNCRONO para crear repositories con sesiones aisladas
    R√©plica s√≠ncrona de RepositoryFactory para casos espec√≠ficos
    """

    def __init__(self):
        # Registrar para cleanup autom√°tico
        _active_sync_factories.add(self)

        # üõ°Ô∏è CONFIGURACI√ìN S√çNCRONA - URL sin aiomysql
        sync_url = str(settings.DATABASE_MYSQL_URL).replace(
            "mysql+aiomysql://", "mysql+pymysql://"
        )

        # Motor s√≠ncrono con configuraci√≥n optimizada
        self._engine = create_engine(
            sync_url,
            echo=False,
            pool_size=3,
            max_overflow=1,
            pool_recycle=600,
            pool_pre_ping=True,
            pool_reset_on_return="commit",
            connect_args={
                "connect_timeout": 8,
                "charset": "utf8mb4",
            },
        )

        # Session maker s√≠ncrono
        self._sessionmaker = sessionmaker(
            autocommit=False, autoflush=False, bind=self._engine
        )

        self._session = None
        self._closed = False
        logger.info("üè≠ RepositoryFactorySync creado con configuraci√≥n s√≠ncrona")

    def get_db_session(self) -> Session:
        """
        Obtener sesi√≥n de base de datos s√≠ncrona reutilizable
        """
        if self._closed:
            raise RuntimeError(
                "RepositoryFactorySync ya est√° cerrado - no se pueden crear m√°s sesiones"
            )

        if self._session is None:
            try:
                self._session = self._sessionmaker()
                logger.debug("üìÅ Nueva sesi√≥n s√≠ncrona de BD creada exitosamente")
            except Exception as e:
                logger.error(f"‚ùå Error cr√≠tico creando sesi√≥n s√≠ncrona de BD: {e}")
                raise RuntimeError(
                    f"No se pudo crear sesi√≥n s√≠ncrona de BD: {e}"
                ) from e

        return self._session

    def create_tipo_cambio_repository(self) -> TipoCambioRepository:
        """Crear repository de TipoCambio (s√≠ncrono)"""
        db_session = self.get_db_session()
        return TipoCambioRepository(db=db_session)

    def create_kpi_acumulado_repository(self) -> KPIAcumuladoRepository:
        """Crear repository de KPI Acumulado (s√≠ncrono)"""
        db_session = self.get_db_session()
        return KPIAcumuladoRepository(db=db_session)

    def create_kpi_repository(self) -> KPIRepository:
        """Crear repository de KPI (s√≠ncrono)"""
        db_session = self.get_db_session()
        return KPIRepository(db=db_session)

    def create_saldos_repository(self) -> SaldosRepository:
        """Crear repository de Saldos (s√≠ncrono)"""
        db_session = self.get_db_session()
        return SaldosRepository(db=db_session)

    def create_nuevos_clientes_nuevos_pagadores_repository(
        self,
    ) -> NuevosClientesNuevosPagadoresRepository:
        """Crear repository de NuevosClientesNuevosPagadores (s√≠ncrono)"""
        db_session = self.get_db_session()
        return NuevosClientesNuevosPagadoresRepository(db=db_session)

    def create_actualizacion_reportes_repository(
        self,
    ) -> ActualizacionReportesRepository:
        """Crear repository de ActualizacionReportes (s√≠ncrono)"""
        db_session = self.get_db_session()
        return ActualizacionReportesRepository(db=db_session)

    def create_cxc_acumulado_dim_repository(self) -> CXCAcumuladoDIMRepository:
        """Crear repository de CXCAcumuladoDIM (s√≠ncrono)"""
        db_session = self.get_db_session()
        return CXCAcumuladoDIMRepository(db=db_session)

    def create_cxc_pagos_fact_repository(self) -> CXCPagosFactRepository:
        """Crear repository de CXCPagosFactRepository (s√≠ncrono)"""
        db_session = self.get_db_session()
        return CXCPagosFactRepository(db=db_session)

    def create_cxc_dev_fact_repository(self) -> CXCDevFactRepository:
        """Crear repository de CXCDevFactRepository (s√≠ncrono)"""
        db_session = self.get_db_session()
        return CXCDevFactRepository(db=db_session)

    def cleanup(self):
        """
        Cleanup s√≠ncrono de recursos
        Cierra sesi√≥n y motor de BD de forma segura
        """
        if self._closed:
            logger.debug("üîÑ RepositoryFactorySync ya estaba cerrado")
            return

        logger.info("üßπ Iniciando cleanup de RepositoryFactorySync...")

        try:
            # 1. üìÅ Cerrar sesi√≥n s√≠ncrona
            if hasattr(self, "_session") and self._session is not None:
                try:
                    self._session.close()
                    logger.debug("‚úÖ Sesi√≥n s√≠ncrona de BD cerrada correctamente")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error cerrando sesi√≥n s√≠ncrona de BD: {e}")
                finally:
                    self._session = None

            # 2. üè≠ Cerrar motor s√≠ncrono
            if hasattr(self, "_engine") and self._engine:
                try:
                    self._engine.dispose()
                    logger.debug("‚úÖ Motor s√≠ncrono de BD cerrado correctamente")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error cerrando motor s√≠ncrono de BD: {e}")

        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico durante cleanup s√≠ncrono: {e}")
        finally:
            self._closed = True
            logger.info("‚úÖ RepositoryFactorySync cleanup completado")

    def __del__(self):
        """
        Destructor seguro para cleanup s√≠ncrono
        """
        if not self._closed and hasattr(self, "_session") and self._session is not None:
            logger.warning(
                "‚ö†Ô∏è RepositoryFactorySync no se cerr√≥ expl√≠citamente antes de destructor"
            )
            with suppress(Exception):
                if self._session:
                    self._session.close()
                self._session = None
            self._closed = True


def create_repository_factory_sync() -> RepositoryFactorySync:
    """
    Crear una nueva instancia de RepositoryFactorySync
    Para casos que requieren conexi√≥n s√≠ncrona a BD
    """
    return RepositoryFactorySync()
